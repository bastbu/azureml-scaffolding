#!/usr/bin/env bash
#? [Pipeline] Run an experiment as a job in AzureML

set -eo pipefail
cd "$(dirname "$0")/../.."

function usage {
    cat<<EOF
Run an experiment in AzureML

Usage: $0 [options] EXPERIMENT

Options:
    -h, --help         Show this help message and exit.
    --job-xargs XARGS  Additional arguments to pass to the job create command.
                       See "az ml job create --help" for more information.

Arguments:
  EXPERIMENT  Directory of the experiment relative to "$CODE_PATH"

The script ensures the experiment is packaged with the minimum artifacts and is
submitted to AzureML with the matching name.
EOF
}

exp=""
while :; do
    case $1 in
        -h|--help) usage; exit ;;
        --job-xargs)
            if [[ -z "$2" ]]; then
                echo>&2 "Missing value for --job-xargs."
                usage >&2
                exit 1
            fi
            xargs=$2
            shift
            ;;
        -e|--exp)
            if [[ -z "$2" ]]; then
                echo>&2 "Missing value for --exp."
                usage >&2
                exit 1
            fi
            exp=$2
            shift
            ;;
        *) break ;;
    esac
    shift
done

if [ $# -eq 0 ]; then
    echo>&2 "Experiment not provided."
    usage
    exit 1
fi
pipeline=$1

bin/chkenv "AZUREML_WORKSPACE" "AZUREML_RESOURCE_GROUP"

source bin/utils/lib.sh  # import: prep_run, run_aml
read -r run_name run_dir <<< "$(prep_run "$pipeline")"
bin/pipe/iso "$pipeline" "$run_dir" > /dev/null

run_args=("$run_name" "$run_dir" "$pipeline.yaml" "$xargs")
if [[ -z "$exp" ]]; then
    # If no experiment is provided, run the job from current branch
    run_aml "${run_args[@]}"
    exit
fi

bin/chkenv "EXPERIMENTS_BRANCH"

commit_id=$(bin/utils/prep-exp --exp-ref "$EXPERIMENTS_BRANCH" "$exp")
curr_branch=$(git rev-parse --abbrev-ref HEAD)
git checkout "$EXPERIMENTS_BRANCH"

if run_aml "${run_args[@]}"; then
    # Push commit to experiment branch only if job submission succeeded
    git push "origin" "$commit_id:$EXPERIMENTS_BRANCH"
fi

# Restore working directory to the original branch.
git checkout "$curr_branch"
